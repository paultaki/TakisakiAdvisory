{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(ls:*)",
      "Bash(sed:*)",
      "Bash(python3:*)",
      "Bash(for file in cst.html customer-success.html pdom.html quota.html)",
      "Bash(do sed -i 's|href=\"\"case-studies.html\"\"|href=\"\"/resume/\"\"|g' \"$file\")",
      "Bash(done)",
      "Bash(do sed -i 's|case-studies\\.html|/resume/|g' \"$file\")",
      "Bash(mv:*)",
      "Bash(# Extract all image references and normalize paths\ncat /tmp/all_refs.txt | \\\ngrep -oE '[^\"'\\''[:space:]>]+\\.(jpg|jpeg|png|gif|svg|webp|ico)' | \\\nsed 's|^/||' | \\\nsed 's|^\\.\\./||g' | \\\nsed 's|^images/||' | \\\nsort -u > /tmp/referenced_images_normalized.txt && \\\necho \"Total unique image references found:\" && wc -l /tmp/referenced_images_normalized.txt && \\\necho && echo \"Sample references:\" && head -20 /tmp/referenced_images_normalized.txt)",
      "Bash(# Search for image references more comprehensively\nrg -o -i '[\"\\']([^\"\\']+\\.(jpg|jpeg|png|gif|svg|webp|ico))[\"\\']' . --type html --type css --type js | \\\ngrep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | \\\nsed -E 's/^[^:]+:[\"\\']([^\"\\']+)[\"\\']$/\\1/' | \\\nsort -u > /tmp/img_refs1.txt && \\\necho \"Method 1 - Quoted references:\" && wc -l /tmp/img_refs1.txt)",
      "Bash(# Find all image references using grep\ngrep -r -h -o -E '[^\"'\\''[:space:]>]+\\.(jpg|jpeg|png|gif|svg|webp|ico)' . --include=\"*.html\" --include=\"*.css\" --include=\"*.js\" | \\\ngrep -v -E \"^\\.git/|^node_modules/|^\\.vscode/\" | \\\nsort -u > /tmp/all_image_refs.txt && \\\necho \"Total unique image references:\" && wc -l /tmp/all_image_refs.txt && \\\necho && echo \"First 30 references:\" && head -30 /tmp/all_image_refs.txt)",
      "Bash(# Find all HTML files\nfind . -name \"*.html\" | grep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | sort > /tmp/all_html.txt && \\\n# Find all links to HTML files\ngrep -r -h -o -E 'href=\"[^\"]+\\.html\"' . --include=\"*.html\" | \\\nsed -E 's/href=\"([^\"]+)\"/\\1/' | \\\nsort -u > /tmp/linked_html.txt && \\\necho \"=== ORPHANED HTML FILES ===\" && \\\necho \"Total HTML files:\" && wc -l /tmp/all_html.txt && \\\necho \"Linked HTML files:\" && wc -l /tmp/linked_html.txt)",
      "Bash(# Create a comprehensive analysis\necho \"=== COMPREHENSIVE FILE ANALYSIS ===\" > /tmp/file_analysis.txt\necho >> /tmp/file_analysis.txt\n\n# 1. Backup/Old Files\necho \"1. BACKUP/OLD FILES TO REMOVE:\" >> /tmp/file_analysis.txt\necho \"==============================\" >> /tmp/file_analysis.txt\nfind . -type f \\( -name \"*-copy*\" -o -name \"*-backup*\" -o -name \"*-old*\" -o -name \"*.bak\" -o -name \"*.orig\" -o -name \"*old.*\" -o -name \"*copy.*\" \\) | \\\ngrep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | sort >> /tmp/file_analysis.txt\n\necho >> /tmp/file_analysis.txt\necho \"2. ORPHANED HTML FILES (not in sitemap or linked):\" >> /tmp/file_analysis.txt\necho \"=================================================\" >> /tmp/file_analysis.txt\n\n# Extract HTML files from sitemap\ngrep -o 'https://www.paultakisaki.com[^<]*\\.html' /mnt/c/Users/pault/Documents/WebDevelopment/Paul\\ Takisaki.com/sitemap.xml | \\\nsed 's|https://www.paultakisaki.com||' | sed 's|^/||' > /tmp/sitemap_html.txt\n\n# List all HTML files not in sitemap\nfind . -name \"*.html\" | grep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | sed 's|^\\./||' | \\\nwhile read file; do\n    if ! grep -q \"$file\" /tmp/sitemap_html.txt; then\n        echo \"$file\"\n    fi\ndone >> /tmp/file_analysis.txt\n\ncat /tmp/file_analysis.txt)",
      "Bash(# Find orphaned HTML files\necho \"=== ORPHANED HTML FILES ===\" \necho\n# HTML files not in sitemap\necho \"HTML files NOT in sitemap:\"\nfind . -name \"*.html\" | grep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | sed 's|^\\./||' | sort > /tmp/all_html_files.txt\ngrep -v -f /tmp/sitemap_html.txt /tmp/all_html_files.txt | grep -v \"^$\")",
      "Bash(# Get all unique image files\nfind . \\( -name \"*.jpg\" -o -name \"*.jpeg\" -o -name \"*.png\" -o -name \"*.gif\" -o -name \"*.svg\" -o -name \"*.webp\" -o -name \"*.ico\" \\) | \\\ngrep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | \\\nsed 's|^\\./||' | sort > /tmp/all_images_list.txt\n\n# Get all image references from HTML, CSS, JS files with better pattern matching\ngrep -r -h -o -E '[^\"'\\''[:space:]<>]+\\.(jpg|jpeg|png|gif|svg|webp|ico)' . \\\n--include=\"*.html\" --include=\"*.css\" --include=\"*.js\" --include=\"*.md\" | \\\ngrep -v -E \"^\\.git/|^node_modules/|^\\.vscode/\" | \\\nsed 's|^\\.\\./||g' | sed 's|^/||' | sort -u > /tmp/referenced_images_list.txt\n\necho \"=== IMAGE ANALYSIS ===\"\necho \"Total images: $(wc -l < /tmp/all_images_list.txt)\"\necho \"Referenced images: $(wc -l < /tmp/referenced_images_list.txt)\"\necho\necho \"Sample of potentially unused images:\"\ncomm -23 /tmp/all_images_list.txt /tmp/referenced_images_list.txt | head -20)",
      "Bash(# Find duplicate images by size\necho \"=== POTENTIAL DUPLICATE IMAGES (same size) ===\" \nfind . \\( -name \"*.jpg\" -o -name \"*.jpeg\" -o -name \"*.png\" -o -name \"*.gif\" -o -name \"*.svg\" -o -name \"*.webp\" -o -name \"*.ico\" \\) \\\n-type f -exec ls -l {} \\; | \\\ngrep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | \\\nawk '{print $5, $9}' | sort | \\\nawk '{if ($1 == prev_size && $1 > 1000) {if (prev_size != printed_size) {print prev_size, prev_file; printed_size=prev_size} print $1, $2}} {prev_size=$1; prev_file=$2}' | \\\nhead -30)",
      "Bash(# Find files with same size\nfind . \\( -name \"*.jpg\" -o -name \"*.jpeg\" -o -name \"*.png\" -o -name \"*.gif\" -o -name \"*.svg\" -o -name \"*.webp\" -o -name \"*.ico\" \\) \\\n-type f -printf \"%s %p\\n\" | \\\ngrep -v -E \"/\\.git/|/node_modules/|/\\.vscode/\" | \\\nsort -n | \\\nawk '$1 == prev_size && $1 > 5000 { if (prev_size != printed) { print prev_size, prev_file; printed = prev_size } print $1, $2 } { prev_size = $1; prev_file = $2 }' | \\\nhead -40)",
      "Bash(# Find images with same file size\nfind . \\( -name \"*.jpg\" -o -name \"*.jpeg\" -o -name \"*.png\" -o -name \"*.gif\" -o -name \"*.svg\" -o -name \"*.webp\" -o -name \"*.ico\" \\) \\\n-type f -exec stat -c \"%s %n\" {} \\; | \\\ngrep -v -E \"/\\.git/|/node_modules/|/\\.vscode/\" | \\\nsort -n > /tmp/image_sizes.txt\n\n# Find duplicates\nawk '{size=$1; file=$2; if (sizes[size]) {if (!printed[size]) {print size, sizes[size]; printed[size]=1} print size, file} sizes[size]=file}' /tmp/image_sizes.txt | \\\ngrep -E \"^[0-9]+ \" | head -40)",
      "Bash(# Find files with same size using md5sum for actual duplicates\necho \"=== CHECKING FOR DUPLICATE IMAGES ===\"\nfind . \\( -name \"*.jpg\" -o -name \"*.jpeg\" -o -name \"*.png\" -o -name \"*.gif\" -o -name \"*.svg\" -o -name \"*.webp\" -o -name \"*.ico\" \\) \\\n-type f -exec md5sum {} \\; | \\\ngrep -v -E \"/\\.git/|/node_modules/|/\\.vscode/\" | \\\nsort | \\\nuniq -w32 -d --all-repeated=separate | \\\nhead -50)",
      "Bash(# Check CSS/JS files usage\necho \"=== CSS/JS FILE ANALYSIS ===\"\necho\necho \"All CSS files:\"\nfind . -name \"*.css\" | grep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | sort\necho\necho \"All JS files:\"\nfind . -name \"*.js\" | grep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | sort\necho\necho \"CSS/JS files NOT referenced in any HTML:\"\n# Get all CSS/JS files\nfind . \\( -name \"*.css\" -o -name \"*.js\" \\) | grep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | sed 's|^\\./||' | sort > /tmp/all_css_js.txt\n# Get referenced CSS/JS\ngrep -r -h -o -E '(href|src)=\"[^\"]+\\.(css|js)\"' . --include=\"*.html\" | sed 's/.*\"\\([^\"]*\\)\"/\\1/' | sed 's|^\\.\\./||' | sed 's|^/||' | sort -u > /tmp/ref_css_js.txt\ncomm -23 /tmp/all_css_js.txt /tmp/ref_css_js.txt)",
      "Bash(# Check for source map files\necho \"=== SOURCE MAP FILES ===\"\nfind . -name \"*.map\" -type f | grep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\")",
      "Bash(# Create detailed unused images list\necho \"=== DETAILED UNUSED IMAGE ANALYSIS ===\" > /tmp/unused_images_detail.txt\necho >> /tmp/unused_images_detail.txt\n\n# Get comprehensive list of image references including from CSS background images\ngrep -r -h -o -E '[^\"'\\''[:space:]<>()]+\\.(jpg|jpeg|png|gif|svg|webp|ico)' . \\\n--include=\"*.html\" --include=\"*.css\" --include=\"*.js\" --include=\"*.xml\" --include=\"*.json\" | \\\ngrep -v -E \"^\\.git/|^node_modules/|^\\.vscode/\" | \\\nsed 's|^\\.\\./||g' | sed 's|^/||' | sort -u > /tmp/all_refs_comprehensive.txt\n\n# Get all images\nfind . \\( -name \"*.jpg\" -o -name \"*.jpeg\" -o -name \"*.png\" -o -name \"*.gif\" -o -name \"*.svg\" -o -name \"*.webp\" -o -name \"*.ico\" \\) | \\\ngrep -v -E \"^\\./\\.git/|^\\./node_modules/|^\\./\\.vscode/\" | \\\nsed 's|^\\./||' | sort > /tmp/all_images_comprehensive.txt\n\necho \"Total images found: $(wc -l < /tmp/all_images_comprehensive.txt)\" >> /tmp/unused_images_detail.txt\necho \"Total unique references: $(wc -l < /tmp/all_refs_comprehensive.txt)\" >> /tmp/unused_images_detail.txt\necho >> /tmp/unused_images_detail.txt\n\necho \"UNUSED IMAGES BY FOLDER:\" >> /tmp/unused_images_detail.txt\necho \"========================\" >> /tmp/unused_images_detail.txt\n\n# Show unused images grouped by folder\ncomm -23 /tmp/all_images_comprehensive.txt /tmp/all_refs_comprehensive.txt | \\\nawk -F'/' '{\n    dir = $1\n    for(i=2; i<NF; i++) dir = dir \"/\" $i\n    if (dir != prev_dir) {\n        if (NR > 1) print \"\"\n        print \"\\n\" dir \"/\"\n        print \"-------------------\"\n        prev_dir = dir\n    }\n    print \"  - \" $NF\n}' >> /tmp/unused_images_detail.txt\n\nhead -100 /tmp/unused_images_detail.txt)",
      "Bash(# Show unused images grouped by directory\necho \"=== UNUSED IMAGES BY DIRECTORY ===\" \ncomm -23 /tmp/all_images_comprehensive.txt /tmp/all_refs_comprehensive.txt | \\\nwhile IFS= read -r file; do\n    dir=$(dirname \"$file\")\n    basename=$(basename \"$file\")\n    echo \"$dir|$basename\"\ndone | sort | \\\nawk -F'|' '\n{\n    if ($1 != current_dir) {\n        if (NR > 1) print \"\"\n        print $1 \":\"\n        print \"----------------------------------------\"\n        current_dir = $1\n    }\n    print \"  - \" $2\n}' | head -150)",
      "Bash(# List unused images by directory\necho \"=== UNUSED IMAGES BY DIRECTORY ===\"\ncomm -23 /tmp/all_images_comprehensive.txt /tmp/all_refs_comprehensive.txt | \\\nsort | \\\nsed 's|^\\([^/]*\\)/\\(.*\\)|\\1:\\2|' | \\\nawk -F: 'BEGIN {dir=\"\"} {if ($1 != dir) {if (NR>1) print \"\"; print \"\\n\" $1 \"/\"; print \"---\"; dir=$1} print \"  - \" $2}')",
      "Bash(# List unused images by directory using simpler method\necho \"=== UNUSED IMAGES BY DIRECTORY ===\"\necho\nprev_dir=\"\"\ncomm -23 /tmp/all_images_comprehensive.txt /tmp/all_refs_comprehensive.txt | sort | while read file; do\n    dir=$(dirname \"$file\")\n    if [ \"$dir\" != \"$prev_dir\" ]; then\n        echo\n        echo \"$dir/\"\n        echo \"----------------------------------------\"\n        prev_dir=\"$dir\"\n    fi\n    echo \"  - $(basename \"$file\")\"\ndone | head -200)",
      "Bash(chmod:*)",
      "Bash(bash:*)",
      "Bash(mkdir:*)",
      "Bash(rmdir:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(if [ -f \"resume/images/$file\" ])",
      "Bash([ -f \"images/testimonials/$file\" ])",
      "Bash(then md5sum \"resume/images/$file\" \"images/testimonials/$file\")",
      "Bash(fi)",
      "Bash(echo)",
      "Bash(do mv \"resume/images/$file\" \"_archive/unused-$(date +%Y%m%d)/duplicate-testimonials/\")",
      "Bash(echo:*)",
      "Bash(do mv \"resume/images/$file\" \"_archive/unused-$(date +%Y%m%d)/duplicate-testimonials/\")",
      "Bash(do if [ -f \"images/$file\" ])",
      "Bash([ -f \"resume/images/$file\" ])",
      "Bash(then echo \"Checking $file:\")",
      "Bash(md5sum:*)",
      "Bash(do mv \"resume/images/$file\" \"_archive/unused-$(date +%Y%m%d)/logo-variations/\")",
      "Bash(then echo \"=== $file ===\")",
      "Bash(do mv \"resume/images/$file\" \"_archive/unused-$(date +%Y%m%d)/\")",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "WebFetch(domain:www.paultakisaki.com)"
    ]
  },
  "enableAllProjectMcpServers": false
}